// Code generated by go-bindata.
// sources:
// config/config.go
// config/config.json
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x93\x51\x6f\xd3\x30\x10\xc7\x9f\xeb\x4f\x71\x58\x1a\x4a\x50\x69\xde\x2b\xed\x85\xa1\x49\x20\x34\x26\x4d\x3c\x21\xa4\x39\xee\x25\x35\x38\x76\xb0\x9d\xc2\x34\xf5\xbb\x73\x8e\xdd\xa6\x69\x44\x5f\x5c\x9f\xff\x77\xf7\xbb\x7f\xaf\xbd\x90\xbf\x44\x8b\x20\xad\x69\x54\xcb\x98\xea\x7a\xeb\x02\x14\x6c\xc5\xd1\x48\xbb\x53\xa6\xad\x7e\x7a\x6b\x38\x05\xb4\x6d\x39\xa3\xb3\x55\x61\x3f\xd4\x1b\x69\xbb\xaa\xb5\xc3\x41\x99\x9a\xce\xf7\x9d\x92\xce\x7a\x74\x07\x25\xb1\xf2\x7b\xe1\x70\xc7\x59\xc9\x58\x55\xe5\xe2\x83\x13\x41\x59\x13\x6f\x41\x28\xe3\x21\xec\x11\x44\xdf\x6b\x25\xd3\x83\xc7\x10\xa8\x9f\x67\xe1\xa5\xc7\xab\x24\x1f\xdc\x20\x03\xbc\xb2\xd5\x47\x11\x44\x2d\x3c\x42\xea\xb1\x39\xdd\x3f\x99\xc6\xc2\x73\x64\xdd\xf2\x53\x8c\x3f\xb3\xd5\x13\x21\xa1\x03\x38\xe9\xcf\xf7\xf8\xc9\xfa\x14\x4b\x6a\xef\x63\xbf\x49\x9d\xef\x33\xf5\x18\x23\xf9\x71\x1c\xef\x01\xff\xdc\xcd\x60\xf1\xef\x68\xa2\x32\x01\x5d\x23\x24\xb2\x66\x30\x72\x21\x2b\x4a\x78\x37\x1f\x92\xa6\x23\x8f\x37\x8f\x8e\x32\xb5\x29\x38\x65\x5c\xd9\x40\xb6\x05\x61\xa4\x12\x01\x79\xc9\x56\x0e\xc3\xe0\x0c\xbc\x9d\x89\x5e\x8f\x99\xeb\x51\x38\x8f\x9f\x9f\xbe\x3e\xc0\x60\x3a\xfa\xbe\x17\xda\x43\xfd\x12\x90\xac\xb7\xd9\x51\x9f\xd8\x0a\x79\xc5\x52\x4e\xd9\x45\x0d\xdf\x7f\xc4\xb4\x12\xd0\x39\xeb\x16\x98\xdf\xfe\x5f\xfd\x02\x32\x7a\xb7\x39\x4b\x8b\x7a\x4d\xd8\xe5\x25\xa9\x83\x6e\xf0\xe4\x5a\xd7\x6b\xec\xd0\x84\x89\x20\x2d\x44\x16\x9d\x5d\x8d\x1c\x13\xe4\x0c\x31\x97\xfd\x62\xc5\x6e\xdc\xb2\xd1\x84\x34\x1f\x34\x4a\xe7\x1f\x24\x3e\x17\x29\x7a\x4f\xc1\x0f\x94\x9f\x27\x5d\xc3\x14\x8e\xa3\xd0\x56\xae\xa1\xcf\x04\xe5\xc2\x80\x31\x3e\x36\x4a\x69\x71\x6a\xe2\x80\xed\x2d\xf4\x9b\x09\x71\xde\x8a\x34\xaa\x89\xb8\xf0\xe6\x16\x8c\xd2\xb1\xea\xac\xec\x42\x3e\xbe\xde\xd3\x6a\xeb\xd8\xf4\xce\x0e\x7a\x07\xc6\x06\xe8\xc7\xf6\x37\xbf\xb7\x70\x73\xe0\x97\xe8\xeb\x58\x9e\x12\x8f\x80\xda\xe3\xa2\x01\x9f\x6f\xad\x26\x3b\xe8\x3f\x1b\xf5\xe4\xdf\xbf\x00\x00\x00\xff\xff\xbb\x63\xb8\xa3\x19\x04\x00\x00")

func configConfigGoBytes() ([]byte, error) {
	return bindataRead(
		_configConfigGo,
		"config/config.go",
	)
}

func configConfigGo() (*asset, error) {
	bytes, err := configConfigGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.go", size: 1049, mode: os.FileMode(420), modTime: time.Unix(1472420993, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configConfigJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\xdd\x4a\xc3\x40\x10\x85\xaf\x9b\xa7\x90\xbd\x76\x6b\x5a\x0b\x06\x41\xc4\x1f\xa4\x60\xb5\xd5\xc4\x07\x58\xd3\xb1\x2e\x26\xd9\x30\x3b\x55\x83\xe4\xdd\x9d\xfd\x31\x44\x10\xa4\x37\x9d\x6f\xce\xce\x9c\x39\xf9\x4a\x26\xe2\x5a\x91\x7a\x56\x16\xc4\xe9\x01\x97\x13\x51\x74\xad\xfb\x2f\x2e\x4d\x45\xe2\xd0\x91\x7b\x55\x7b\xb2\x33\xb2\xd6\x25\x1a\x0b\xf8\xae\x4b\x08\x4d\x27\x93\x5b\x8d\x50\x92\xc1\xce\xc9\xa6\x47\xa1\xf3\xf4\xb8\x72\xe5\x6c\x7e\x32\x4d\xf9\x37\x8b\x94\x5f\x37\x71\x60\x20\x1b\x65\xed\x87\xc1\xed\x88\x18\x24\xae\xe4\xcc\x57\x77\x5d\xfe\xb0\x92\xad\x42\x7e\x45\x80\x4e\x76\xce\x95\x85\x42\xd7\x70\x46\xb8\x07\x91\x4c\x7a\x96\x8a\x9c\x8d\x79\x81\x3f\x64\x69\x2c\xfd\xde\xc4\xbb\x97\x45\xb1\x61\xe0\x5e\x8d\x51\xce\xec\x45\x55\x36\x40\x47\xa2\x87\x2c\x4d\xd3\x81\xe5\x11\x2e\x16\xc7\x9e\x5d\x01\xd2\x8d\xae\x46\x1b\x6e\xa1\x1b\xc0\x60\xca\x5a\x6d\x9a\x1f\x57\x39\x94\x08\xc4\xba\x3f\x12\x95\xd6\x37\xe5\x1b\x77\xff\x4f\x7e\xdd\x12\xcf\xb5\x71\xb0\xcb\x91\x5e\x9d\x38\xc4\xcf\x1f\xd6\xd4\x4a\x37\x83\x37\x0e\x52\x7d\x5e\xec\xdc\xbc\x79\x96\x85\xab\xbc\x9d\x3d\xc2\xf8\x7a\x3e\x95\xa8\x5d\x37\x55\x17\x73\x62\xd6\xf3\x2d\x49\x9f\x7c\x07\x00\x00\xff\xff\xa2\xcc\x84\xdd\x2f\x02\x00\x00")

func configConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_configConfigJson,
		"config/config.json",
	)
}

func configConfigJson() (*asset, error) {
	bytes, err := configConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.json", size: 559, mode: os.FileMode(420), modTime: time.Unix(1469743254, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.go": configConfigGo,
	"config/config.json": configConfigJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.go": &bintree{configConfigGo, map[string]*bintree{}},
		"config.json": &bintree{configConfigJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

